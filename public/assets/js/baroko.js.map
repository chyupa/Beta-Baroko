{"version":3,"sources":["baroko.module.js","cart.filter.js","general.filters.js","cart.factory.js","category.factory.js","checkout.factory.js","contact.factory.js","homepage.factory.js","order.factory.js","product.factory.js","subcategory.factory.js","cart.controller.js","categories.controller.js","category.controller.js","checkout.controller.js","contact.controller.js","homepage.controller.js","order.controller.js","product.controller.js","subcategories.controller.js","subcategory.controller.js","cart.directive.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"baroko.js","sourcesContent":["(function () {\n    'use strict';\n    //TODO: refactor categories and subcategories to use one factory instead of two. No need for two.\n    angular\n        .module('baroko.front', [\n            'ngAnimate',\n            'toastr'\n        ])\n        .constant('endpoints', {\n            BACK: {\n                GET_PRODUCTS: '/api/getPublicProducts',\n                GET_PRODUCT: '/api/getProduct/',\n\n                ADD_TO_CART: '/api/addToCart',\n                GET_CART_CONTENTS: '/api/getCartContents',\n                REMOVE_CART_ITEM: '/api/removeCartItem',\n                UPDATE_CART_QUANTITY: '/api/updateCartQuantity',\n\n                PLACE_ORDER: '/api/placeOrder',\n\n                GET_CATEGORIES: '/api/getCategories',\n                GET_CATEGORY: '/api/getCategory/',\n\n                GET_SUBCATEGORIES: '/api/getSubcategories',\n                GET_SUBCATEGORY: '/api/getSubcategory',\n                GET_SUBCATEGORY_PRODUCTS: '/api/getSubcategoryProducts/',\n\n                SAVE_CONTACT: '/api/saveContact/'\n            },\n            FRONT: {\n                THANK_YOU: '/thank-you'\n            }\n        })\n        .constant('extensions', {\n            SINGLE: {\n                METRU: 'metru',\n                BUCATA: 'bucata'\n            },\n            PLURAL: {\n                METRU: 'metrii',\n                BUCATA: 'bucati'\n            }\n        });\n\n})();","(function () {\n    'use strict';\n\n    angular\n      .module('baroko.front')\n      .filter('transportFee', transportFee);\n\n    /**\n     * Transport Fee function that returns the actual amount of the fee\n     *\n     * @returns {Function}\n     */\n    function transportFee() {\n        return function(total) {\n            if (total < 300) {\n                return 22.5;\n            } else if (total < 700) {\n                return 9;\n            } else {\n                return 0;\n            }\n        }\n    }\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .filter('extension', extension);\r\n\r\n    extension.$inject = ['extensions'];\r\n\r\n    /**\r\n     * Filter for using the right singular/plural product extension\r\n     *\r\n     * @param extensions\r\n     * @returns {Function}\r\n     */\r\n    function extension(extensions) {\r\n\r\n       return function(extension, quantity) {\r\n           if (extension === extensions.SINGLE.BUCATA) {\r\n               switch (quantity) {\r\n                   case 0:\r\n                       return quantity + ' ' + extensions.PLURAL.BUCATA;\r\n                   case 1:\r\n                       return quantity + ' ' + extensions.SINGLE.BUCATA;\r\n                   default:\r\n                       return quantity + ' ' + extensions.PLURAL.BUCATA;\r\n               }\r\n           } else {\r\n               switch (quantity) {\r\n                   case 0:\r\n                       return quantity + ' ' + extensions.PLURAL.METRU;\r\n                   case 1:\r\n                       return quantity + ' ' + extensions.SINGLE.METRU;\r\n                   default:\r\n                       return quantity + ' ' + extensions.PLURAL.METRU;\r\n               }\r\n           }\r\n       }\r\n    }\r\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('baroko.front')\n        .factory('CartFactory', CartFactory);\n\n    CartFactory.$inject = ['endpoints', 'toastr', '$http'];\n\n    function CartFactory(endpoints, toastr, $http) {\n        return {\n            addToCart: addToCart,\n            getCartContents: getCartContents,\n            removeCartItem: removeCartItem,\n            updateCartQuantity: updateCartQuantity\n        };\n\n        /**\n         * Get product info\n         *\n         * @param string url\n         * @returns {HttpPromise}\n         */\n        function addToCart(data) {\n            return $http.post(endpoints.BACK.ADD_TO_CART, data)\n                .then(addToCartComplete)\n                .catch(addToCartFailed)\n\n            /**\n             * success callback\n             *\n             * @param response\n             * @returns {*}\n             */\n            function addToCartComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * error callback\n             *\n             * @param response\n             */\n            function addToCartFailed(response) {\n                toastr.error(\"Oops something went wrong!\");\n            }\n        }\n\n        /**\n         * Get cart contents\n         *\n         * @returns {HttpPromise}\n         */\n        function getCartContents() {\n            return $http.get(endpoints.BACK.GET_CART_CONTENTS)\n              .then(getCartContentsComplete)\n              .catch(getCartContentsFailed);\n\n            /**\n             * success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function getCartContentsComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * error callback\n             *\n             * @param response\n             */\n            function getCartContentsFailed(response) {\n                toastr.error('Oops something went wrong with your cart!');\n                console.error(response);\n            }\n        }\n\n        /**\n         * Remove cart item\n         *\n         * @param data\n         * @returns {HttpPromise}\n         */\n        function removeCartItem(data) {\n            return $http.post(endpoints.BACK.REMOVE_CART_ITEM, data)\n                .then(removeCartItemComplete)\n                .catch(removeCartItemFailed);\n\n            /**\n             * Success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function removeCartItemComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * Error callback\n             *\n             * @param response\n             */\n            function removeCartItemFailed(reponse) {\n                toastr.error('Ooops! Could not remove the cart item');\n            }\n        }\n\n        /**\n         * Update cart item\n         *\n         * @param data\n         * @returns {HttpPromise}\n         */\n        function updateCartQuantity(data) {\n            return $http.post(endpoints.BACK.UPDATE_CART_QUANTITY, data)\n                .then(updateCartQuantityComplete)\n                .catch(updateCartQuantityFailed);\n\n            /**\n             * Success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function updateCartQuantityComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * Error callback\n             *\n             * @param response\n             */\n            function updateCartQuantityFailed(reponse) {\n                toastr.error('Ooops! Could not update the cart item');\n            }\n        }\n    }\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('CategoryFactory', CategoryFactory);\r\n\r\n    CategoryFactory.$inject = ['$http', 'endpoints', 'toastr'];\r\n\r\n    /**\r\n     * Category factory\r\n     *\r\n     * @param $http\r\n     * @param endpoints\r\n     * @param toastr\r\n     * @returns {{getCategories: getCategories, getCategory: getCategory}}\r\n     * @constructor\r\n     */\r\n    function CategoryFactory ($http, endpoints, toastr) {\r\n        return {\r\n            getCategories: getCategories,\r\n            getCategory: getCategory\r\n        };\r\n\r\n        /**\r\n         * Get all categories\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getCategories() {\r\n            return $http.get(endpoints.BACK.GET_CATEGORIES)\r\n                .then(getCategoriesComplete)\r\n                .catch(getCategoriesFailed);\r\n\r\n            /**\r\n             * Success callback\r\n             *\r\n             * @param response\r\n             * @returns {Object}\r\n             */\r\n            function getCategoriesComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Failed callback\r\n             *\r\n             * @param response\r\n             */\r\n            function getCategoriesFailed(response) {\r\n                toastr.error('Ooops! Categories fetch failed');\r\n                console.log(response);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * get category by slug\r\n         *\r\n         * @param categorySlug\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getCategory(categorySlug) {\r\n            return $http.get(endpoints.BACK.GET_CATEGORY + categorySlug)\r\n                .then(getCategorySuccess)\r\n                .catch(getCategoryFailed);\r\n\r\n            /**\r\n             * Success callback\r\n             *\r\n             * @param response\r\n             * @returns {*}\r\n             */\r\n            function getCategorySuccess(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Failed callback\r\n             *\r\n             * @param response\r\n             */\r\n            function getCategoryFailed(response) {\r\n                toastr.error('Ooops! Did not find the category');\r\n                console.error(response);\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\n    'use strict';\n\n    angular\n      .module('baroko.front')\n      .factory('CheckoutFactory', CheckoutFactory);\n\n    CheckoutFactory.$inject = ['$http', 'endpoints', 'toastr'];\n\n    /**\n     * Checkout factory\n     *\n     * @param $http\n     * @param endpoints\n     * @param toastr\n     * @returns {{placeOrder: placeOrder}}\n     * @constructor\n     */\n    function CheckoutFactory($http, endpoints, toastr) {\n        return {\n            placeOrder: placeOrder\n        };\n\n        /**\n         * Place order\n         *\n         * @param data\n         * @returns {HttpPromise}\n         */\n        function placeOrder(data) {\n            return $http.post(endpoints.BACK.PLACE_ORDER, data)\n              .then(placeOrderComplete)\n              .catch(placeOrderFailed);\n\n            /**\n             * success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function placeOrderComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * error callback\n             * show toast\n             *\n             * @param response\n             */\n            function placeOrderFailed(response) {\n                console.log(response);\n                toastr.error('Ooops! Could not place the order');\n            }\n        }\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('ContactFactory', ContactFactory);\r\n\r\n    ContactFactory.$inject = ['$http', 'endpoints', 'toastr'];\r\n\r\n    /**\r\n     * Save contact info to DB\r\n     *\r\n     * @param $http\r\n     * @param endpoints\r\n     * @param toastr\r\n     * @returns {{saveContact: saveContact}}\r\n     * @constructor\r\n     */\r\n    function ContactFactory($http, endpoints, toastr) {\r\n        return {\r\n            saveContact: saveContact\r\n        };\r\n\r\n        /**\r\n         * Call the BACK endpoint to save the data\r\n         *\r\n         * @param data\r\n         * @returns {HttpPromise}\r\n         */\r\n        function saveContact(data) {\r\n            return $http.post(endpoints.BACK.SAVE_CONTACT, data)\r\n                .then(saveContactCompleted)\r\n                .catch(saveContactFailed);\r\n\r\n            /**\r\n             * Success callback\r\n             *\r\n             * @param response\r\n             * @returns {Object}\r\n             */\r\n            function saveContactCompleted(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Error callback\r\n             *\r\n             * @param response\r\n             */\r\n            function saveContactFailed(response) {\r\n                toastr.error('Ooops! Could not send your message.');\r\n                console.log(response);\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\r\n   'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('HomePageFactory', HomePageFactory);\r\n\r\n    HomePageFactory.$inject = ['endpoints', '$http', 'toastr'];\r\n\r\n    function HomePageFactory(endpoints, $http, toastr) {\r\n\r\n        return {\r\n            getProducts: getProducts\r\n        };\r\n\r\n        /**\r\n         * Get all products\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProducts() {\r\n            return $http.get(endpoints.BACK.GET_PRODUCTS)\r\n                .then(getProductsComplete)\r\n                .catch(getProductsFailed);\r\n\r\n            /**\r\n             * Return data\r\n             *\r\n             * @param response\r\n             * @returns {*}\r\n             */\r\n            function getProductsComplete (response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Show error\r\n             *\r\n             * @param response\r\n             */\r\n            function getProductsFailed (response) {\r\n                toastr.error(\"Get Products Failed because: \" + response.data);\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\n    'use strict';\n\n    angular\n      .module('baroko.front')\n      .factory('OrderFactory', OrderFactory);\n\n    OrderFactory.$inject = ['$http', 'endpoints'];\n\n    function OrderFactory($http, endpoints) {\n        return {\n            createOrder: createOrder\n        }\n\n        function createOrder(data) {\n            return $http.post(endpoints, data)\n              .then(createOrderComplete)\n              .catch(createOrderFailed);\n\n            function createOrderComplete(response) {\n                return response.data;\n            }\n\n            function createOrderFailed(response) {\n                toastr.error(\"Ooops! We couldn't add your order\");\n            }\n        }\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('ProductFactory', ProductFactory);\r\n\r\n    ProductFactory.$inject = ['endpoints', 'toastr', '$http'];\r\n\r\n    function ProductFactory(endpoints, toastr, $http) {\r\n        return {\r\n            getProduct: getProduct\r\n        };\r\n\r\n        /**\r\n         * Get product info\r\n         *\r\n         * @param string url\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProduct(url) {\r\n            return $http.get(endpoints.BACK.GET_PRODUCT + url)\r\n                .then(getProductComplete)\r\n                .catch(getProductFailed)\r\n\r\n            /**\r\n             * success callback\r\n             *\r\n             * @param response\r\n             * @returns {*}\r\n             */\r\n            function getProductComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * error callback\r\n             *\r\n             * @param response\r\n             */\r\n            function getProductFailed(response) {\r\n                toastr.error(\"Oops something went wrong!\");\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('SubcategoryFactory', SubcategoryFactory);\r\n\r\n    SubcategoryFactory.$inject = ['$http', 'endpoints', 'toastr'];\r\n\r\n    /**\r\n     * Subcategories factory\r\n     *\r\n     * @param $http\r\n     * @param endpoints\r\n     * @param toastr\r\n     * @returns {{getSubcategories: getSubcategories}}\r\n     * @constructor\r\n     */\r\n    function SubcategoryFactory($http, endpoints, toastr) {\r\n        return {\r\n            getSubcategories: getSubcategories,\r\n            getProducts: getProducts\r\n        };\r\n\r\n        /**\r\n         * get all subcategories\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getSubcategories() {\r\n            return $http.get(endpoints.BACK.GET_SUBCATEGORIES)\r\n                .then(getSubcategoriesComplete)\r\n                .catch(getSubcategoriesFailed);\r\n\r\n            /**\r\n             * Success callback\r\n             *\r\n             * @param response\r\n             * @returns {Object}\r\n             */\r\n            function getSubcategoriesComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Failed callback\r\n             *\r\n             * @param response\r\n             */\r\n            function getSubcategoriesFailed(response) {\r\n                toastr.error('Ooops! Could not retrieve subcategories');\r\n                console.error(response);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get all products belonging to a subcategory\r\n         *\r\n         * @param subcategorySlug\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProducts(subcategorySlug) {\r\n            return $http.get(endpoints.BACK.GET_SUBCATEGORY_PRODUCTS + subcategorySlug)\r\n                .then(getProductsComplete)\r\n                .catch(getProductsFailed);\r\n\r\n            /**\r\n             * Success callback\r\n             *\r\n             * @param response\r\n             * @returns {Object}\r\n             */\r\n            function getProductsComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Failed callback\r\n             *\r\n             * @param response\r\n             */\r\n            function getProductsFailed(response) {\r\n                toastr.error('Ooops! Could not retrieve this subcategory\\'s products');\r\n                console.error(response);\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('CartController', CartController)\r\n\r\n    CartController.$inject = ['toastr', 'CartFactory', 'transportFeeFilter'];\r\n\r\n    function CartController(toastr, CartFactory, transportFeeFilter) {\r\n        var vm = this;\r\n        vm.addQuantity = addQuantity;\r\n        vm.removeQuantity = removeQuantity;\r\n        vm.updateCartTotals = updateCartTotals;\r\n        vm.removeCartItem = removeCartItem;\r\n        vm.cartContents = {};\r\n        vm.transportFee = 0;\r\n        vm.total = 0;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Increase item quantity\r\n         *\r\n         * @param index\r\n         * @returns {HttpPromise}\r\n         */\r\n        function addQuantity(index) {\r\n            return updateCartQuantity(index, true);\r\n        }\r\n\r\n        /**\r\n         * Decrease item quantity\r\n         *\r\n         * @param index\r\n         * @returns {HttpPromise}\r\n         */\r\n        function removeQuantity(index) {\r\n            return updateCartQuantity(index, false);\r\n        }\r\n\r\n        /**\r\n         * Remove item from cart\r\n         *\r\n         * @param index\r\n         * @returns {*|Array.<T>}\r\n         */\r\n        function removeCartItem(index) {\r\n            var data = {\r\n                url: vm.cartContents[index].product.url\r\n            };\r\n            return CartFactory.removeCartItem(data)\r\n                .then(function (response) {\r\n                    toastr.success(response.success);\r\n                    vm.cartContents.splice(index, 1);\r\n                    updateCartTotals();\r\n                });\r\n        }\r\n\r\n        /**\r\n         * TODO: need to calculate the updateCartTotals every time the quantity changes\r\n         */\r\n        function updateCartTotals() {\r\n            //calculate total of cart contents\r\n            var cartContentsLength = vm.cartContents.length;\r\n            var total = 0;\r\n            for (var i = 0; i < cartContentsLength; i++) {\r\n                total += vm.cartContents[i].quantity * vm.cartContents[i].price;\r\n            }\r\n            //calculate transportFee\r\n            vm.transportFee = transportFeeFilter(total);\r\n            //add transportFee to total\r\n            vm.total = total + vm.transportFee;\r\n        }\r\n\r\n        /**\r\n         * Update Cart Item in backend\r\n         * TODO: need to think about this\r\n         *\r\n         * @param index\r\n         * @param increase\r\n         * @returns {HttpPromise}\r\n         */\r\n        function updateCartQuantity(index, increase) {\r\n            var quantity = vm.cartContents[index].quantity;\r\n            var data = {\r\n                url: vm.cartContents[index].product.url,\r\n                quantity: increase ? ++quantity : --quantity\r\n            };\r\n            return CartFactory.updateCartQuantity(data)\r\n                .then(function (response) {\r\n                    toastr.success(response.success);\r\n                    increase ? ++vm.cartContents[index].quantity : --vm.cartContents[index].quantity;\r\n                    updateCartTotals();\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Activate function\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function activate() {\r\n            return CartFactory.getCartContents()\r\n                .then(function (response) {\r\n                    console.log(response);\r\n                    vm.cartContents = response;\r\n                    updateCartTotals();\r\n                });\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('CategoriesController', CategoriesController);\r\n\r\n    CategoriesController.$inject = ['CategoryFactory', 'toastr'];\r\n    function CategoriesController(CategoryFactory, toastr) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            toastr.success('Categories Controller activated');\r\n            return CategoryFactory.getCategories()\r\n                .then(function(response) {\r\n                    console.log(response);\r\n                    vm.categories = response.success;\r\n                });\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('CategoryController', CategoryController);\r\n\r\n    CategoryController.$inject = ['CategoryFactory', '$location', 'toastr'];\r\n\r\n    function CategoryController(CategoryFactory, $location, toastr) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            toastr.success('Category Controller activated');\r\n            return CategoryFactory.getCategory(getSlugFromUrl())\r\n                .then(function(response) {\r\n                    vm.category = response.success;\r\n                });\r\n        }\r\n\r\n\r\n        /**\r\n         * helper function for getting the slug\r\n         *\r\n         * @returns {string}\r\n         */\r\n        function getSlugFromUrl() {\r\n            return $location.absUrl().split('/').pop();\r\n        }\r\n    }\r\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('baroko.front')\n        .controller('CheckoutController', CheckoutController);\n\n    CheckoutController.$inject = ['CheckoutFactory', 'toastr', '$window'];\n\n    function CheckoutController(CheckoutFactory, toastr, $window) {\n        var vm = this;\n        vm.placeOrder = placeOrder;\n        vm.formData = {};\n\n        activate();\n\n        /**\n         * place order\n         * @returns {HttpPromise}\n         */\n        function placeOrder() {\n            return CheckoutFactory.placeOrder(vm.formData)\n              .then(function(response) {\n                  if (response.success) {\n                      $window.location.href = response.success;\n                  }\n              });\n        }\n\n        /**\n         * activation function\n         */\n        function activate() {\n            toastr.success('CheckoutController activated');\n        }\n\n\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('ContactController', ContactController);\r\n\r\n    ContactController.$inject = ['ContactFactory', 'toastr'];\r\n\r\n    function ContactController(ContactFactory, toastr) {\r\n        var vm = this;\r\n        vm.submitForm = submitForm;\r\n        vm.formData = {};\r\n\r\n        activate();\r\n\r\n\r\n        function submitForm() {\r\n            \r\n        }\r\n\r\n        function activate() {\r\n            toastr.success('Contact Controller activated');\r\n        }\r\n    }\r\n})();","(function () {\r\n   'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('HomePageController', HomePageController)\r\n\r\n    HomePageController.$inject = ['toastr', 'HomePageFactory'];\r\n\r\n    function HomePageController(toastr, HomePageFactory) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Get all products\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProducts() {\r\n            return HomePageFactory.getProducts()\r\n                .then(function (response) {\r\n                    vm.products = response.products;;\r\n                    toastr.success(response.success);\r\n                })\r\n        }\r\n\r\n        /**\r\n         * activation function\r\n         */\r\n        function activate() {\r\n            getProducts();\r\n        }\r\n    }\r\n})();","(function() {\n    'use strict'\n\n    angular\n      .module('baroko.front')\n      .controller('OrderController', OrderController)\n\n    OrderController.$inject = ['toastr'];\n\n    function OrderController(toastr) {\n        var vm = this;\n\n        activate();\n\n        function activate() {\n            toastr.success('Order Controller activated');\n        }\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('ProductController', ProductController);\r\n\r\n    ProductController.$inject = ['toastr', 'ProductFactory', 'CartFactory', '$location'];\r\n\r\n    function ProductController(toastr, ProductFactory, CartFactory, $location) {\r\n        var vm = this;\r\n        vm.submitForm = submitForm;\r\n        vm.addQuantity = addQuantity;\r\n        vm.removeQuantity = removeQuantity;\r\n        vm.quantity = 0;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Add one unit\r\n         *\r\n         * @returns {number}\r\n         */\r\n        function addQuantity() {\r\n            return ++vm.quantity;\r\n        }\r\n\r\n        /**\r\n         * Remove one unit\r\n         *\r\n         * @returns {number}\r\n         */\r\n        function removeQuantity() {\r\n            return --vm.quantity;\r\n        }\r\n\r\n        /**\r\n         * Get product info\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProductInfo() {\r\n            return ProductFactory.getProduct(getSlugFromUrl())\r\n                .then(function(response) {\r\n                    vm.product = response.product;\r\n                });\r\n        }\r\n\r\n        function submitForm() {\r\n\r\n            /**\r\n             * send this object to backend in order to save in DB\r\n             * we also send the price since the price might change and it is best to save this value for the order\r\n             *\r\n             * @type {{url: string, quantity: number, price: number}}\r\n             */\r\n            var data = {\r\n                url: getSlugFromUrl(),\r\n                quantity: vm.quantity,\r\n                price: vm.product.prices.price\r\n            };\r\n\r\n            /**\r\n             * call backend to add to cart\r\n             */\r\n            return CartFactory.addToCart(data)\r\n                .then(function (response) {\r\n                    toastr.success(response.success);\r\n                });\r\n        }\r\n\r\n        /**\r\n         * activate controller\r\n         */\r\n        function activate() {\r\n            toastr.success('ProductController activated');\r\n\r\n            getProductInfo();\r\n        }\r\n\r\n        /**\r\n         * helper function for getting the slug\r\n         *\r\n         * @returns {string}\r\n         */\r\n        function getSlugFromUrl() {\r\n            return $location.absUrl().split('/').pop();\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('SubcategoriesController', SubcategoriesController);\r\n\r\n    SubcategoriesController.$inject = ['SubcategoryFactory', 'toastr'];\r\n\r\n    function SubcategoriesController(SubcategoryFactory, toastr) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function activate() {\r\n            toastr.success('Subcategory Controller activated');\r\n            return SubcategoryFactory.getSubcategories()\r\n                .then(function(response) {\r\n                    vm.subcategories = response.success;\r\n                })\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('SubcategoryController', SubcategoryController);\r\n\r\n    SubcategoryController.$inject = ['SubcategoryFactory', '$location', 'toastr'];\r\n\r\n    function SubcategoryController(SubcategoryFactory, $location, toastr) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function activate() {\r\n            toastr.success('Single Subcategory controller activated');\r\n            return SubcategoryFactory.getProducts(getSlugFromUrl())\r\n                .then(function(response) {\r\n                    console.log(response);\r\n                   vm.subcategory = response.success;\r\n                });\r\n        }\r\n\r\n\r\n        /**\r\n         * helper function for getting the slug\r\n         *\r\n         * @returns {string}\r\n         */\r\n        function getSlugFromUrl() {\r\n            return $location.absUrl().split('/').pop();\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .directive('barokoCart', barokoCart);\r\n\r\n    function barokoCart() {\r\n        var directive = {\r\n            restrict: 'EA',\r\n            templateUrl: '/assets/views/cart-directive.html',\r\n            scope: false,\r\n            controller: 'CartController',\r\n            controllerAs: 'vm'\r\n        };\r\n\r\n        return directive;\r\n    }\r\n})();"],"sourceRoot":"/source/"}