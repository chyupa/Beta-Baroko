{"version":3,"sources":["baroko.module.js","cart.filter.js","general.filters.js","cart.factory.js","homepage.factory.js","order.factory.js","product.factory.js","cart.controller.js","checkout.controller.js","homepage.controller.js","order.controller.js","product.controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"baroko.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('baroko.front', [\n            'ngAnimate',\n            'toastr'\n        ])\n        .constant('endpoints', {\n            BACK: {\n                GET_PRODUCTS: 'api/getPublicProducts',\n                GET_PRODUCT: 'api/getProduct/',\n\n                ADD_TO_CART: 'api/addToCart',\n                GET_CART_CONTENTS: 'api/getCartContents',\n                REMOVE_CART_ITEM: 'api/removeCartItem',\n                UPDATE_CART_QUANTITY: 'api/updateCartQuantity'\n            }\n        })\n        .constant('extensions', {\n            SINGLE: {\n                METRU: 'metru',\n                BUCATA: 'bucata'\n            },\n            PLURAL: {\n                METRU: 'metrii',\n                BUCATA: 'bucati'\n            }\n        });\n\n})();","(function () {\n    'use strict';\n\n    angular\n      .module('baroko.front')\n      .filter('transportFee', transportFee);\n\n    /**\n     * Transport Fee function that returns the actual amount of the fee\n     *\n     * @returns {Function}\n     */\n    function transportFee() {\n        return function(total) {\n            if (total < 300) {\n                return 22.5;\n            } else if (total < 700) {\n                return 9;\n            } else {\n                return 0;\n            }\n        }\n    }\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .filter('extension', extension);\r\n\r\n    extension.$inject = ['extensions'];\r\n\r\n    /**\r\n     * Filter for using the right singular/plural product extension\r\n     *\r\n     * @param extensions\r\n     * @returns {Function}\r\n     */\r\n    function extension(extensions) {\r\n\r\n       return function(extension, quantity) {\r\n           if (extension === extensions.SINGLE.BUCATA) {\r\n               switch (quantity) {\r\n                   case 0:\r\n                       return quantity + ' ' + extensions.PLURAL.BUCATA;\r\n                   case 1:\r\n                       return quantity + ' ' + extensions.SINGLE.BUCATA;\r\n                   default:\r\n                       return quantity + ' ' + extensions.PLURAL.BUCATA;\r\n               }\r\n           } else {\r\n               switch (quantity) {\r\n                   case 0:\r\n                       return quantity + ' ' + extensions.PLURAL.METRU;\r\n                   case 1:\r\n                       return quantity + ' ' + extensions.SINGLE.METRU;\r\n                   default:\r\n                       return quantity + ' ' + extensions.PLURAL.METRU;\r\n               }\r\n           }\r\n       }\r\n    }\r\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('baroko.front')\n        .factory('CartFactory', CartFactory);\n\n    CartFactory.$inject = ['endpoints', 'toastr', '$http'];\n\n    function CartFactory(endpoints, toastr, $http) {\n        return {\n            addToCart: addToCart,\n            getCartContents: getCartContents,\n            removeCartItem: removeCartItem,\n            updateCartQuantity: updateCartQuantity\n        };\n\n        /**\n         * Get product info\n         *\n         * @param string url\n         * @returns {HttpPromise}\n         */\n        function addToCart(data) {\n            return $http.post(endpoints.BACK.ADD_TO_CART, data)\n                .then(addToCartComplete)\n                .catch(addToCartFailed)\n\n            /**\n             * success callback\n             *\n             * @param response\n             * @returns {*}\n             */\n            function addToCartComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * error callback\n             *\n             * @param response\n             */\n            function addToCartFailed(response) {\n                toastr.error(\"Oops something went wrong!\");\n            }\n        }\n\n        /**\n         * Get cart contents\n         *\n         * @returns {HttpPromise}\n         */\n        function getCartContents() {\n            return $http.get(endpoints.BACK.GET_CART_CONTENTS)\n              .then(getCartContentsComplete)\n              .catch(getCartContentsFailed);\n\n            /**\n             * success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function getCartContentsComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * error callback\n             *\n             * @param response\n             */\n            function getCartContentsFailed(response) {\n                toastr.error('Oops something went wrong with your cart!');\n                console.error(response);\n            }\n        }\n\n        /**\n         * Remove cart item\n         *\n         * @param data\n         * @returns {HttpPromise}\n         */\n        function removeCartItem(data) {\n            return $http.post(endpoints.BACK.REMOVE_CART_ITEM, data)\n                .then(removeCartItemComplete)\n                .catch(removeCartItemFailed);\n\n            /**\n             * Success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function removeCartItemComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * Error callback\n             *\n             * @param response\n             */\n            function removeCartItemFailed(reponse) {\n                toastr.error('Ooops! Could not remove the cart item');\n            }\n        }\n\n        /**\n         * Update cart item\n         *\n         * @param data\n         * @returns {HttpPromise}\n         */\n        function updateCartQuantity(data) {\n            return $http.post(endpoints.BACK.UPDATE_CART_QUANTITY, data)\n                .then(updateCartQuantityComplete)\n                .catch(updateCartQuantityFailed);\n\n            /**\n             * Success callback\n             *\n             * @param response\n             * @returns {Object}\n             */\n            function updateCartQuantityComplete(response) {\n                return response.data;\n            }\n\n            /**\n             * Error callback\n             *\n             * @param response\n             */\n            function updateCartQuantityFailed(reponse) {\n                toastr.error('Ooops! Could not update the cart item');\n            }\n        }\n    }\n})();","(function() {\r\n   'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('HomePageFactory', HomePageFactory);\r\n\r\n    HomePageFactory.$inject = ['endpoints', '$http', 'toastr'];\r\n\r\n    function HomePageFactory(endpoints, $http, toastr) {\r\n\r\n        return {\r\n            getProducts: getProducts\r\n        };\r\n\r\n        /**\r\n         * Get all products\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProducts() {\r\n            return $http.get(endpoints.BACK.GET_PRODUCTS)\r\n                .then(getProductsComplete)\r\n                .catch(getProductsFailed);\r\n\r\n            /**\r\n             * Return data\r\n             *\r\n             * @param response\r\n             * @returns {*}\r\n             */\r\n            function getProductsComplete (response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * Show error\r\n             *\r\n             * @param response\r\n             */\r\n            function getProductsFailed (response) {\r\n                toastr.error(\"Get Products Failed because: \" + response.data);\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\n    'use strict';\n\n    angular\n      .module('baroko.front')\n      .factory('OrderFactory', OrderFactory);\n\n    OrderFactory.$inject = ['$http', 'endpoints'];\n\n    function OrderFactory($http, endpoints) {\n        return {\n            createOrder: createOrder\n        }\n\n        function createOrder(data) {\n            return $http.post(endpoints, data)\n              .then(createOrderComplete)\n              .catch(createOrderFailed);\n\n            function createOrderComplete(response) {\n                return response.data;\n            }\n\n            function createOrderFailed(response) {\n                toastr.error(\"Ooops! We couldn't add your order\");\n            }\n        }\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .factory('ProductFactory', ProductFactory);\r\n\r\n    ProductFactory.$inject = ['endpoints', 'toastr', '$http'];\r\n\r\n    function ProductFactory(endpoints, toastr, $http) {\r\n        return {\r\n            getProduct: getProduct\r\n        };\r\n\r\n        /**\r\n         * Get product info\r\n         *\r\n         * @param string url\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProduct(url) {\r\n            return $http.get(endpoints.BACK.GET_PRODUCT + url)\r\n                .then(getProductComplete)\r\n                .catch(getProductFailed)\r\n\r\n            /**\r\n             * success callback\r\n             *\r\n             * @param response\r\n             * @returns {*}\r\n             */\r\n            function getProductComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            /**\r\n             * error callback\r\n             *\r\n             * @param response\r\n             */\r\n            function getProductFailed(response) {\r\n                toastr.error(\"Oops something went wrong!\");\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('baroko.front')\n        .controller('CartController', CartController)\n\n    CartController.$inject = ['toastr', 'CartFactory', 'transportFeeFilter'];\n\n    function CartController(toastr, CartFactory, transportFeeFilter) {\n        var vm = this;\n        vm.addQuantity = addQuantity;\n        vm.removeQuantity = removeQuantity;\n        vm.updateCartTotals = updateCartTotals;\n        vm.removeCartItem = removeCartItem;\n        vm.cartContents = {};\n        vm.transportFee = 0;\n        vm.total = 0;\n\n        activate();\n\n        /**\n         * Increase item quantity\n         *\n         * @param index\n         * @returns {HttpPromise}\n         */\n        function addQuantity(index) {\n            return updateCartQuantity(index, true);\n        }\n\n        /**\n         * Decrease item quantity\n         *\n         * @param index\n         * @returns {HttpPromise}\n         */\n        function removeQuantity(index) {\n            return updateCartQuantity(index, false);\n        }\n\n        /**\n         * Remove item from cart\n         *\n         * @param index\n         * @returns {*|Array.<T>}\n         */\n        function removeCartItem(index) {\n            var data = {\n                url: vm.cartContents[index].product.url\n            };\n            return CartFactory.removeCartItem(data)\n                .then(function (response) {\n                    toastr.success(response.success);\n                    vm.cartContents.splice(index, 1);\n                    updateCartTotals();\n                });\n        }\n\n        /**\n         * TODO: need to calculate the updateCartTotals every time the quantity changes\n         */\n        function updateCartTotals() {\n            //calculate total of cart contents\n            var cartContentsLength = vm.cartContents.length;\n            var total = 0;\n            for (var i = 0; i < cartContentsLength; i++) {\n                total += vm.cartContents[i].quantity * vm.cartContents[i].price;\n            }\n            //calculate transportFee\n            vm.transportFee = transportFeeFilter(total);\n            //add transportFee to total\n            vm.total = total + vm.transportFee;\n        }\n\n        /**\n         * Update Cart Item in backend\n         * TODO: need to think about this\n         *\n         * @param index\n         * @param increase\n         * @returns {HttpPromise}\n         */\n        function updateCartQuantity(index, increase) {\n            var quantity = vm.cartContents[index].quantity;\n            var data = {\n                url: vm.cartContents[index].product.url,\n                quantity: increase ? ++quantity : --quantity\n            };\n            return CartFactory.updateCartQuantity(data)\n                .then(function (response) {\n                    toastr.success(response.success);\n                    increase ? ++vm.cartContents[index].quantity : --vm.cartContents[index].quantity;\n                    updateCartTotals();\n                });\n        }\n\n        /**\n         * Activate function\n         *\n         * @returns {HttpPromise}\n         */\n        function activate() {\n            return CartFactory.getCartContents()\n                .then(function (response) {\n                    console.log(response);\n                    vm.cartContents = response;\n                    updateCartTotals();\n                });\n        }\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('CheckoutController', CheckoutController);\r\n\r\n    CheckoutController.$inject = ['toastr'];\r\n\r\n    function CheckoutController(toastr) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            toastr.success('CheckoutController activated');\r\n        }\r\n    }\r\n})();","(function () {\r\n   'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('HomePageController', HomePageController)\r\n\r\n    HomePageController.$inject = ['toastr', 'HomePageFactory'];\r\n\r\n    function HomePageController(toastr, HomePageFactory) {\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Get all products\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProducts() {\r\n            return HomePageFactory.getProducts()\r\n                .then(function (response) {\r\n                    vm.products = response.products;;\r\n                    toastr.success(response.success);\r\n                })\r\n        }\r\n\r\n        /**\r\n         * activation function\r\n         */\r\n        function activate() {\r\n            getProducts();\r\n        }\r\n    }\r\n})();","(function() {\n    'use strict'\n\n    angular\n      .module('baroko.front')\n      .controller('OrderController', OrderController)\n\n    OrderController.$inject = ['toastr'];\n\n    function OrderController(toastr) {\n        var vm = this;\n\n        activate();\n\n        function activate() {\n            toastr.success('Order Controller activated');\n        }\n    }\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('baroko.front')\r\n        .controller('ProductController', ProductController);\r\n\r\n    ProductController.$inject = ['toastr', 'ProductFactory', 'CartFactory', '$location'];\r\n\r\n    function ProductController(toastr, ProductFactory, CartFactory, $location) {\r\n        var vm = this;\r\n        vm.submitForm = submitForm;\r\n        vm.addQuantity = addQuantity;\r\n        vm.removeQuantity = removeQuantity;\r\n        vm.quantity = 0;\r\n\r\n        activate();\r\n\r\n        /**\r\n         * Add one unit\r\n         *\r\n         * @returns {number}\r\n         */\r\n        function addQuantity() {\r\n            return ++vm.quantity;\r\n        }\r\n\r\n        /**\r\n         * Remove one unit\r\n         *\r\n         * @returns {number}\r\n         */\r\n        function removeQuantity() {\r\n            return --vm.quantity;\r\n        }\r\n\r\n        /**\r\n         * Get product info\r\n         *\r\n         * @returns {HttpPromise}\r\n         */\r\n        function getProductInfo() {\r\n            return ProductFactory.getProduct(getSlugFromUrl())\r\n                .then(function(response) {\r\n                    vm.product = response.product;\r\n                });\r\n        }\r\n\r\n        function submitForm() {\r\n\r\n            /**\r\n             * send this object to backend in order to save in DB\r\n             * we also send the price since the price might change and it is best to save this value for the order\r\n             *\r\n             * @type {{url: string, quantity: number, price: number}}\r\n             */\r\n            var data = {\r\n                url: getSlugFromUrl(),\r\n                quantity: vm.quantity,\r\n                price: vm.product.prices.price\r\n            };\r\n\r\n            /**\r\n             * call backend to add to cart\r\n             */\r\n            return CartFactory.addToCart(data)\r\n                .then(function (response) {\r\n                    toastr.success(response.success);\r\n                });\r\n        }\r\n\r\n        /**\r\n         * activate controller\r\n         */\r\n        function activate() {\r\n            toastr.success('ProductController activated');\r\n\r\n            getProductInfo();\r\n        }\r\n\r\n        /**\r\n         * helper function for getting the slug\r\n         *\r\n         * @returns {string}\r\n         */\r\n        function getSlugFromUrl() {\r\n            return $location.absUrl().split('/').pop();\r\n        }\r\n    }\r\n})();"],"sourceRoot":"/source/"}